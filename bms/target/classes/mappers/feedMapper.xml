<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="feed">
	<insert id="insertPost" parameterType="PostDto">
		INSERT INTO
			POST(
				MEMBER_ID,
				CATEGORY_TITLE,
				TITLE,
				THUMBNAIL,
				CONTENT,
				POST_PRIVATE,
				REG_DATE,
				LIKE_COUNT,
				REPLY_COUNT
			)
		VALUES(
				#{memberId},
				#{categoryTitle},
				#{title},
				#{thumbnail},
				#{content},
				#{postPrivate},
				NOW(),
				0,
				0
		)

	</insert>
	
	<select id="selectOneMember" parameterType="String" resultType="MemberDto">
		SELECT
				*
		FROM
				MEMBER
		WHERE 
				ID = #{id}
	</select>
	
	<select id="selectPostList" parameterType="map" resultType="map">
		<choose>
			<when test='sessionId != id'> <!-- 내 피드가 아닌 다른 회원 피드라면 비공개된 글 제외하고 반환 -->
				SELECT
						POST_ID 		AS postId,
						MEMBER_ID		AS memberId,
						CATEGORY_TITLE	AS categoryTitle,
						TITLE			AS title,
						THUMBNAIL		AS thumbnail,
						CONTENT			AS content,
						date_format(REG_DATE, '%Y-%m-%d %H:%i') AS regDate,
						LIKE_COUNT		AS likeCount,
		 				REPLY_COUNT		AS replyCount
				FROM
						POST
				WHERE
						MEMBER_ID = #{id} AND POST_PRIVATE = 'N' AND
				<choose>
					<when test='category == null'>
						(TITLE LIKE CONCAT('%', #{searchWord}, '%') OR CONTENT LIKE CONCAT('%',
						#{searchWord}, '%'))
					</when>
					<otherwise>
						CATEGORY_TITLE = #{category}
					</otherwise>
				</choose>
			
				ORDER BY
						REG_DATE DESC
				LIMIT
						#{startIndex}, #{viewPostCount}
			</when>
			<otherwise> <!-- 내 피드라면 비공개까지 전부 반환 -->
				SELECT
						POST_ID 		AS postId,
						MEMBER_ID		AS memberId,
						CATEGORY_TITLE	AS categoryTitle,
						TITLE			AS title,
						THUMBNAIL		AS thumbnail,
						CONTENT			AS content,
						POST_PRIVATE 	AS postPrivate,
						date_format(REG_DATE, '%Y-%m-%d %H:%i') AS regDate,
						LIKE_COUNT		AS likeCount,
		 				REPLY_COUNT		AS replyCount
				FROM
						POST
				WHERE
						MEMBER_ID = #{id} AND
				<choose>
					<when test='category == null'>
						(TITLE LIKE CONCAT('%', #{searchWord}, '%') OR CONTENT LIKE CONCAT('%',
						#{searchWord}, '%'))
					</when>
					<otherwise>
						CATEGORY_TITLE = #{category}
					</otherwise>
				</choose>
			
				ORDER BY
						REG_DATE DESC
				LIMIT
						#{startIndex}, #{viewPostCount}
			</otherwise>
		</choose>

	</select>
	
	<select id="selectToTalPostCount" parameterType="map" resultType="int">
		<choose>
			<when test='sessionId != id'> <!-- 내 계정이 아니라면 비공개 글 제외하고 -->
				SELECT
						COUNT(*)
				FROM
						POST
				WHERE
						MEMBER_ID = #{id} AND POST_PRIVATE = 'N' AND
				<choose>
					<when test='category == null'>
						(TITLE LIKE CONCAT('%', #{searchWord}, '%') OR CONTENT LIKE CONCAT('%',
						#{searchWord}, '%'))
					</when>
					<otherwise>
						CATEGORY_TITLE = #{category}
					</otherwise>
				</choose>
			
				ORDER BY
						REG_DATE DESC
			</when>
			<otherwise>
				SELECT
						COUNT(*)
				FROM
						POST
				WHERE
						MEMBER_ID = #{id} AND
				<choose>
					<when test='category == null'>
						(TITLE LIKE CONCAT('%', #{searchWord}, '%') OR CONTENT LIKE CONCAT('%',
						#{searchWord}, '%'))
					</when>
					<otherwise>
						CATEGORY_TITLE = #{category}
					</otherwise>
				</choose>
			
				ORDER BY
						REG_DATE DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="selectOnePost" parameterType="String" resultType="PostDto">
		SELECT
				POST_ID,
		 		MEMBER_ID,
		 		CATEGORY_TITLE,
		 		TITLE,
		 		THUMBNAIL,
		 		CONTENT,
		 		POST_PRIVATE,
		 		date_format(REG_DATE, '%Y-%m-%d %H:%i') REGDATE,
		 		LIKE_COUNT,
		 		REPLY_COUNT
		FROM
				POST
		WHERE
				POST_ID = #{postId}
	</select>
	
		
	<select id="selectLikePost" parameterType="LikePostDto" resultType="LikePostDto">
		SELECT
				*
		FROM	
				LIKEPOST
		WHERE 
				MEMBER_ID = #{memberId} AND POST_ID = #{postId}
	</select>
	
	<update id="updatePost" parameterType="PostDto">
		UPDATE
				POST
		SET
				CATEGORY_TITLE = #{categoryTitle},
				TITLE = #{title},
				THUMBNAIL = #{thumbnail},
				CONTENT = #{content},
				POST_PRIVATE = #{postPrivate}
		WHERE
				POST_ID = #{postId}
	</update>
	
	<delete id="deletePost" parameterType="String">
		DELETE FROM
					POST
		WHERE	
					POST_ID = #{postId}		
	</delete>
	
	<insert id="insertReply" parameterType="ReplyDto">
		INSERT INTO
				REPLY(
					MEMBER_ID,
					POST_ID,
					TOP_REPLY_ID,
					MENTION,
					CONTENT,
					REG_DATE
				)
		VALUES(
			#{memberId},
			#{postId},
			#{topReplyId},
			#{mention},
			#{content},
			NOW()
		)
	</insert>
	
	<select id="selectReplyList" parameterType="String" resultType="ReplyDto">
		SELECT
				R.REPLY_ID 		AS REPLY_ID,
				R.MEMBER_ID 	AS MEMBER_ID,
				M.NICKNAME 		AS NICKNAME,
				M.PROFILE_NAME 	AS PROFILE_NAME,
				R.POST_ID 		AS POST_ID,
				R.TOP_REPLY_ID 	AS TOP_REPLY_ID,
				R.MENTION 		AS MENTION,
				R.CONTENT 		AS CONTENT,
				date_format(R.REG_DATE, '%Y-%m-%d %H:%i') AS REGDATE
		FROM
				REPLY R
					JOIN MEMBER M
				ON R.MEMBER_ID = M.ID
		WHERE
				POST_ID = #{postId}
				
	</select>
	
	<select id="selectCheckTopReply" parameterType="ReplyDto" resultType="ReplyDto">
		SELECT
				TOP_REPLY_ID
		FROM
				REPLY
		WHERE
				REPLY_ID = #{replyId}
	</select>
	
	<select id="selectCheckSubReply" parameterType="ReplyDto" resultType="int"> <!-- 지우고 싶은 댓글에 하위 댓글이 있는지 -->
		SELECT
				count(*)
		FROM
				REPLY
		WHERE
				TOP_REPLY_ID = #{replyId}
	</select>
	
	<delete id="deleteReply" parameterType="ReplyDto">
		DELETE FROM
					REPLY
		WHERE
					REPLY_ID = #{replyId}
	</delete>
	
	<update id="deleteReplyContent" parameterType="ReplyDto"> <!-- 삭제하려는 댓글이지만 하위 댓글에 영향 끼치지 않기 위해 내용만 삭제해 준다. -->
		UPDATE
				REPLY
		SET
				CONTENT = ''
		WHERE
				REPLY_ID = #{replyId}
	</update>
	
	<update id="updateReply" parameterType="ReplyDto">
		UPDATE
				REPLY
		SET
				CONTENT = #{content}
		WHERE
				REPLY_ID = #{replyId}
	</update>

	
	<select id="selectLikeMember" resultType="LikeMemberDto">
		SELECT
				*
		FROM
				LIKEMEMBER
		WHERE
				MEMBER_ID = #{memberId} AND FAVORITE_ID = #{favoriteId}
	</select>
	
	<select id="selectLikeCount" parameterType="String" resultType="int">
		SELECT
				LIKE_COUNT
		FROM
				POST
		WHERE
				POST_ID = #{postId}
	</select>
	
	<select id="selectReplyCount" parameterType="String" resultType="int">
		SELECT
				REPLY_COUNT
		FROM
				POST
		WHERE
				POST_ID = #{postId}
	</select>
	
	<update id="updateReplyAdd" parameterType="ReplyDto">
		UPDATE
				POST
		SET
				REPLY_COUNT = REPLY_COUNT + 1
		WHERE
				POST_ID = #{postId}
	</update>
	
	<update id="updateReplyCancel" parameterType="ReplyDto">
		UPDATE
				POST
		SET
				REPLY_COUNT = REPLY_COUNT - 1
		WHERE
				POST_ID = #{postId}
	</update>
</mapper>